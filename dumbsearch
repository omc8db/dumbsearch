#!/usr/bin/env python3
import tkinter as tk
from subprocess import run, Popen, CalledProcessError

helptext = "Start typing to search. Press Alt+R to rebuild the index."

# Create the window and widgets
window = tk.Tk()
window.title("Dumbsearch")
window.geometry("800x400")
input_var = tk.StringVar()
input_entry = tk.Entry(window, textvariable=input_var)
input_entry.pack(fill=tk.X)
input_entry.focus_set()
output_listbox = tk.Listbox(window)
output_listbox.pack(fill=tk.BOTH, expand=True)

def message(text):
    output_listbox.delete(0, tk.END)
    output_listbox.insert(tk.END, text)
    output_listbox.itemconfig(0, {"fg": "grey"})
    window.update()
message(helptext)

# Hook up keyboard shortcuts
window.bind("<Escape>", lambda _: window.destroy())
window.bind("<Control-u>", lambda _: input_var.set(""))
input_entry.bind("<Down>", lambda _: output_listbox.focus_set())

def search(*_):
    if not input_var.get():
        message(helptext)
        return
    command = f"rg -i -m 500 -N '{input_var.get()}' ~/.searchindex"
    try:
        output = run(command, shell=True, capture_output=True, text=True)
        output_listbox.delete(0, tk.END)  # Clear previous outputs
        matches = output.stdout.splitlines()
        if not matches:
            message("No results")
        for line in matches:
            output_listbox.insert(tk.END, line)
        output_listbox.selection_set(0)
    except CalledProcessError as e:
        message("Search failed. Return code: {e.returncode}")
    except Exception as e:
        message(f"An error occurred: {e}")
input_var.trace_add("write", search)

def open_file(_):
    selected_index = output_listbox.curselection()
    if selected_index:
        selected_item = output_listbox.get(selected_index)
        try:
            Popen(["xdg-open", selected_item])
        except CalledProcessError as e:
            output_listbox.insert(tk.END, f"Error opening file with xdg-open: {e}")
        window.destroy()
output_listbox.bind("<Double-Button-1>", open_file)
window.bind("<Return>", open_file)

def rebuild_index(_):
    message("Rebuilding search index. This might take some time ...")
    try:
        output = run("find / > ~/.searchindex", shell=True, capture_output=True, text=True)
        message("Indexing complete")
    except CalledProcessError as e:
        message("Indexing failed. Error contents {output.stderr}")
input_entry.bind("<Alt-r>", rebuild_index)

window.mainloop()
