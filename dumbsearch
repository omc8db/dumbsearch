#!/usr/bin/env python3
import tkinter as tk
from subprocess import run, Popen, CalledProcessError
import os

helptext = """Start typing to search. 
Keybindings:
    Alt+R  : rebuild the index.
    Ctrl+c : copy path to clipboard
    Ctrl+f : open parent folder
"""

# Don't index these real folders because they add a ton of useless noise entries
SKIP_INDEX = ' '.join([f"-not -path '{x}/*'" for x in [
    '/tmp',
    '/var/lib/flatpak',
    '/var/tmp',
    '/home/*/.var/app',
    '/home/*/.cache',
    '*/.git',
]])



# Create the window and widgets
window = tk.Tk()
window.title("Dumbsearch")
window.geometry("800x400")
input_var = tk.StringVar()
input_entry = tk.Entry(window, textvariable=input_var)
input_entry.pack(fill=tk.X)
input_entry.focus_set()
output_listbox = tk.Listbox(window)
output_listbox.pack(fill=tk.BOTH, expand=True)

def message(text):
    output_listbox.delete(0, tk.END)
    for i, line in enumerate(text.split('\n')):
        output_listbox.insert(tk.END, line)
        output_listbox.itemconfig(i, {"fg": "grey"})
    window.update()
message(helptext)

# Hook up keyboard shortcuts
window.bind("<Escape>", lambda _: window.destroy())
window.bind("<Control-u>", lambda _: input_var.set(""))
input_entry.bind("<Down>", lambda _: output_listbox.focus_set())

def search(*_):
    if not input_var.get():
        message(helptext)
        return
    command = f"rg -i -m 500 -NI '{input_var.get()}' ~/.searchindex*"
    try:
        output = run(command, shell=True, capture_output=True, text=True)
        output_listbox.delete(0, tk.END)  # Clear previous outputs
        matches = output.stdout.splitlines()
        if not matches:
            message("No results")
        for line in matches:
            output_listbox.insert(tk.END, line)
        output_listbox.selection_set(0)
    except CalledProcessError as e:
        message("Search failed. Return code: {e.returncode}")
    except Exception as e:
        message(f"An error occurred: {e}")
input_var.trace_add("write", search)

def open_file(folder=False, clipboard=False):
    selected_index = output_listbox.curselection()
    if selected_index:
        fname = output_listbox.get(selected_index)
        if folder:
            fname = os.path.dirname(fname)
        if clipboard:
            window.clipboard_clear()
            window.clipboard_append(fname)
            return
        try:
            Popen(["xdg-open", fname])
        except CalledProcessError as e:
            output_listbox.insert(tk.END, f"Error opening file with xdg-open: {e}")
        window.destroy()
output_listbox.bind("<Double-Button-1>", lambda _: open_file())
window.bind("<Return>", lambda _: open_file())
window.bind("<Control-c>", lambda _: open_file(clipboard=True))
window.bind("<Control-f>", lambda _: open_file(folder=True))

def rebuild_index(_):
    message("Rebuilding search index. This might take some time ...")
    try:
        output = run(f"find / -mount {SKIP_INDEX} | split -C 10M - ~/.searchindex", shell=True, capture_output=True, text=True)
        message("Indexing complete")
    except CalledProcessError as e:
        message(f"Indexing failed. Error contents {output.stderr}")
input_entry.bind("<Alt-r>", rebuild_index)

window.mainloop()
